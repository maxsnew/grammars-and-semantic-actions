* LL(1) Grammars and Automata

Krishnaswami gave a characterization of LL(1) grammars using a type
system over CFEs.

Can we describe the *implementation* as a grammar too? Yes, using predicate logic.

Given an LL(1) grammar with nonterminals NTerm over terminals Term, define
the type of stacks Stk to be the (discrete) type of Lists over NTerm + Term

Given the parsing table for an LL(1) grammar, we can define an
"automaton" as the following mutual recursion:

rec
 Begin = Work(Start::[])
 Work(L) = ...

where Work(L) is a disjunction of the following cases:

1. For each entry mapping a non-terminal N and lookahead character c
   to a production rhs N |-> E, we have a case

   ∃ L'. (L = N :: L') /\ c⊤ /\ Work(E @ L')

   where @ is appending the list E to L'

2. For each terminal c, we have a case

   ∃ L'. (L = c :: L') /\ (c Work(L'))

To produce a parse in the original grammar, we need to define an
algebra. The carrier for this algebra will be defined by induction
over the list L:

⟦ Begin ⟧        = Start
⟦ Work([]) ⟧     = ε
⟦ Work(N::L) ⟧   = N Work(L)
⟦ Work(c :: L) ⟧ = c Work(L)

For the "expand" transitions we can simply show:
⟦ Work(E @ L') ⟧ |- ⟦ Work(N :: L) ⟧
E, ⟦ Work(L') ⟧ |- N ⟦ Work(L) ⟧
which follows by the original production

And for the "pop" transitions we can easily verify:
c ⟦ Work(L') ⟧ |- ⟦ Work(c :: L') ⟧
which is just the identity

How to prove in the other direction?
