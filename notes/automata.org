(Got this from Mellies-Zeilberger CFG paper, though Noam might have
had an earlier ref).

A non-deterministic finite-state automaton over an alphabet Σ classically consists of
1. a finite set of states Q
2. a transition relation Q x Σ o-o Q
3. a labelling of the states into accept/reject accepts? : Q -> bool
4. some specified set of start states Q0 ⊆ Q

We can define this as a kind of *span* of *categories*. First, we can
view 1 and 2 as a *functor* from a category of states and transitions
to the category of strings:
1. The string category Σ* is the "free monoid" as a one-bject cat
2. The state category Trans has Q as objects and morphisms q -> q' are
   words w such that a q transition to q' is possible along the
   characters of w.

To label the states with accept/reject, we can add another functor
from Trans to ∇2, the chaotic category on true and false.

To label the start states, we adjoin an initial object to the string
category Σ*_{_|_} to represent the "beginning of the string". Then
Trans should also have an initial object "start" which maps to the
initial object and there is a morphism from this object to a state if
that state is a start state.

This gives us a span of categories

Σ*_{_|_} <-- Trans --> ∇2

Where the left leg is a ULF(?) functor or something like
that. Probably nice things like composing with monoid homomorphisms
can be proven in this way.
