%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                       String Definitions                         %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Publishing houses
% %%%%%%%%%%%%%%%%%
@STRING{ap =        "Academic Press" }
@STRING{springer =  {Springer-Verlag} }
@STRING{lncs =      "Lecture Notes in Computer Science" }
@STRING{lnm =       "Lecture Notes in Mathematics" }
@STRING{gtm =       "Graduate Texts in Mathematics" }
@STRING{lfcs =      "Laboratory for Foundations of Computer Science,
                    University of Edinburgh" }
@STRING{mp =        "MIT Press" }
@STRING{mitpress =  mp }
%
% Journals and magazines
% %%%%%%%%%%%%%%%%%%%%%%
@STRING{toplas =    "ACM Transactions on Programming Languages and Systems" }
@STRING{jlp =       {Journal of Logic Programming} }
@STRING{cacm =      "Communications of the {ACM}" }
@STRING{jacm =      "Journal of the {ACM}" }
@STRING{tcs =       "Theoretical Computer Science" }
@STRING{eptcs =       "Electronic Proceedings in Theoretical Computer Science" }
@STRING{jsl =       "Journal of Symbolic Logic" }
@STRING{siamjc =    "SIAM Journal on Computing" }
@STRING{mscs =      "Mathematical Structures in Computer Science" }
@STRING{proc =      "Proceedings of the" }
@STRING{ic =        "Information and Computation" }
@STRING{iandcomp =  {Information and Computation} }
@string{ifip =      "International Federation for Information Processing World Computer Congress (IFIP)"}
@STRING{jfp =       "Journal of Functional Programming" }
@STRING{lmcs =      "Logical Methods in Computer Science" }
@string{hosc =      "Higher-Order and Symbolic Computation"}
@STRING{cup =       "Cambridge University Press" }
@STRING{mcgh =      "McGraw-Hill" }
@STRING{nh =        "North Holland" }
@STRING{sv =        "Springer-Verlag" }
@STRING{aw =        "Addison-Wesley" }
@STRING{ph =        "Prentice Hall" }
@STRING{signot =    "SIGPLAN Notices"}
@STRING{taoop =     "Carl A. Gunter and John C. Mitchell, editors, {\em
                    Theoretical Aspects of Object-Oriented Programming:
                    Types, Semantics, and Language Design}, MIT Press, 1994" }
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                             Conferences                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@STRING{popl =      "{ACM} {S}ymposium on {P}rinciples of {P}rogramming
                     {L}anguages ({POPL})" }
@STRING{popl73 =    popl # ", Boston, Massachusetts" }
@STRING{popl75 =    popl # ", Palo Alto, California" }
@STRING{popl76 =    popl # ", {A}tlanta, {G}eorgia" }
@STRING{popl77 =    popl # ", Los Angeles, California" }
@STRING{popl78 =    popl # ", Tucson, Arizona" }
@STRING{popl79 =    popl # ", San Antonio, Texas" }
@STRING{popl80 =    popl # ", Las Vegas, Nevada" }
@STRING{popl81 =    popl # ", Williamsburg, Virginia" }
@STRING{popl82 =    popl # ", Albuquerque, New Mexico" }
@STRING{popl83 =    popl # ", Austin, Texas" }
@STRING{popl84 =    popl # ", Salt Lake City, Utah" }
@STRING{popl85 =    popl # ", New Orleans, Louisiana" }
@STRING{popl86 =    popl # ", St.\ Petersburg Beach, Florida" }
@STRING{popl87 =    popl # ", Munich, Germany" }
@STRING{popl88 =    popl # ", San Diego, California" }
@STRING{popl89 =    popl # ", Austin, Texas" }
@STRING{popl90 =    popl # ", {S}an {F}rancisco, {C}alifornia" }
@STRING{popl91 =    popl # ", Orlando, Florida" }
@STRING{popl92 =    popl # ", Albuquerque, New Mexico" }
@STRING{popl93 =    popl # ", Charleston, South Carolina" }
@STRING{popl94 =    popl # ", {P}ortland, {O}regon" }
@STRING{popl95 =    popl # ", San Francisco, California" }
@STRING{popl96 =    popl # ", St.~Petersburg Beach, Florida" }
@STRING{popl97 =    popl # ", Paris, France" }
@STRING{popl98 =    popl # ", San Diego, California" }
@STRING{popl99 =    popl # ", San Antonio, Texas" }
@STRING{popl00 =    popl # ", Boston, Massachusetts" }
@STRING{popl01 =    popl # ", London, England" }
@STRING{popl02 =    popl # ", Portland, Oregon" }
@STRING{popl03 =    popl # ", New Orleans, Louisiana" }
@STRING{popl04 =    popl # ", Venice, Italy" }
@STRING{popl05 =    popl # ", Long Beach, California" }
@STRING{popl06 =    popl # ", Charleston, South Carolina" }
@STRING{popl07 =    popl # ", Nice, France" }
@STRING{popl08 =    popl # ", San Francisco, California" }
@STRING{popl09 =    popl # ", Savannah, Georgia" }
@STRING{popl10 =    popl # ", Madrid, Spain" }
@STRING{popl11 =    popl # ", Austin, Texas" }
@STRING{popl12 =    popl # ", Philadelphia, Pennsylvania" }
@STRING{popl13 =    popl # ", Rome, Italy" }
@STRING{popl14 =    popl # ", San Diego, California" }
@STRING{popl15 =    popl # ", Mumbai, India" }
@STRING{popl16 =    popl # ", St. Petersburg, Florida" }
@STRING{popl17 =    popl # ", Paris, France" }
@STRING{popl19 =    popl # ", Cascais, Portugal" }
% ----
@STRING{icfp =      "{I}nternational {C}onference on {F}unctional {P}rogramming
                    ({ICFP})" }
@STRING{icfp96 =    icfp # ", Philadelphia, Pennsylvania" }
@STRING{icfp97 =    icfp # ", Amsterdam, The Netherlands" }
@STRING{icfp98 =    icfp # ", Baltimore, Maryland, USA" }
@STRING{icfp99 =    icfp # ", Paris, France" }
@STRING{icfp00 =    icfp # ", Montreal, Canada" }
@STRING{icfp01 =    icfp # ", Firenze, Italy" }
@STRING{icfp02 =    icfp # ", Pittsburgh, Pennsylvania" }
@STRING{icfp03 =    icfp # ", Uppsala, Sweden" }
@STRING{icfp04 =    icfp # ", Snowbird, Utah" }
@STRING{icfp05 =    icfp # ", Tallinn, Estonia" }
@STRING{icfp06 =    icfp # ", Portand, Oregon" }
@STRING{icfp07 =    icfp # ", Freiburg, Germany" }
@STRING{icfp08 =    icfp # ", Victoria, British Columbia, Canada" }
@STRING{icfp09 =    icfp # ", Edinburgh, Scotland" }
@STRING{icfp10 =    icfp # ", Baltimore, Maryland" }
@STRING{icfp11 =    icfp # ", Tokyo, Japan" }
@STRING{icfp12 =    icfp # ", Copenhagen, Denmark" }
@STRING{icfp13 =    icfp # ", Boston, Massachusetts" }
@STRING{icfp14 =    icfp # ", Gothenburg, Sweden" }
@STRING{icfp15 =    icfp # ", Vancouver, British Columbia, Canada" }
@STRING{icfp16 =    icfp # ", Nara, Japan" }
@STRING{icfp17 =    icfp # ", Oxford, United Kingdom" }
@STRING{icfp18 =    icfp # ", St. Louis, Missouri" }
@STRING{icfp19 =    icfp # ", Berlin, Germany" }
@STRING{icfp21 =    icfp } % virtual. Add "Online Conference"?

% ----
@STRING{oopsla =    "{ACM} {S}ymposium on {O}bject {O}riented {P}rogramming:
                    {S}ystems, {L}anguages, and {A}pplications ({OOPSLA})" }
@STRING{oopsla86 =  oopsla # ", Portland, Oregon" }
@STRING{oopsla89 =  oopsla }
@STRING{oopsla98 =  oopsla # ", Vancouver, British Columbia" }
@STRING{oopsla08 =  oopsla # ", Nashville, Tennessee" }
% ----
@STRING{types = "Types for Proofs and Programs (TYPES)"}
@STRING{types03 = types # ", Torino, Italy"}
@STRING{types15 = types # ", Tallinn, Estonia"}
@STRING{types21 = types }
@STRING{oldLics =      "IEEE Symposium on Logic in Computer Science (LICS)" }
@STRING{lics =      "ACM/IEEE Symposium on Logic in Computer Science (LICS)" }
@STRING{lics89 =    oldLics # "Pacific Grove, California" }
@STRING{lics91 =    oldLics # ", Amsterdam, The Netherlands" }
@STRING{lics92 =    lics # ", Santa Cruz, California" }
@STRING{lics93 =    lics # ", Montreal, Canada" }
@STRING{lics94 =    lics # ", Paris, France" }
@STRING{lics95 =    lics # ", San Diego, California" }
@STRING{lics96 =    lics # ", New Brunswick, New Jersey" }
@STRING{lics97 =    lics # ", Warsaw, Poland" }}
@STRING{lics98 =    lics # ", Indianapolis, Indiana" }
@STRING{lics99 =    lics # ", Trento, Italy" }
@STRING{lics00 =    lics # ", Santa Barbara, California" }
@STRING{lics01 =    lics # ", Boston, Massachusetts" }
@STRING{lics02 =    lics # ", Copenhagen, Denmark" }
@STRING{lics03 =    lics # ", Ottawa, Canada" }
@STRING{lics04 =    lics # ", Turku, Finland" }
@STRING{lics05 =    lics # ", Chicago, Illinois" }
@STRING{lics06 =    lics # ", Seattle, Washington" }
@STRING{lics07 =    lics # ", Wroclaw, Poland" }
@STRING{lics08 =    lics # ", Pittsburgh, Pennsylvania" }
@STRING{lics09 =    lics # ", Los Angeles, California" }
@STRING{lics10 =    lics # ", Edinburgh, Scotland" }
@STRING{lics11 =    lics # ", Toronto, Canada" }
@STRING{lics12 =    lics # ", Dubrovnik, Croatia" }
@STRING{lics13 =    lics # ", New Orleans, Louisiana" }
@STRING{lics14 =    lics # ", Vienna, Austria" }
@STRING{lics16 =    lics # ", New York City, New York" }
@STRING{lics17 =    lics # ", Reykjavik, Iceland" }
@STRING{lics22 =    lics # ", Haifa, Israel" }
% ----
@STRING{pldi =      "{ACM SIGPLAN Conference on Programming Language Design
                    and Implementation (PLDI)}" }
@STRING{pldi88 =    pldi # ", {A}tlanta, {G}eorgia" }
@STRING{pldi89 =    pldi # ", Portland, Oregon" }
@STRING{pldi90 =    pldi # ", White Plains, New York" }
@STRING{pldi91 =    pldi # ", Toronto, Ontario" }
@STRING{pldi92 =    pldi # ", San Francisco, California" }
@STRING{pldi93 =    pldi # ", Albuquerque, New Mexico" }
@STRING{pldi94 =    pldi # ", Orlando, Florida" }
@STRING{pldi95 =    pldi # ", La Jolla, California" }
@STRING{pldi96 =    pldi # ", Philadephia, Pennsylvania" }
@STRING{pldi97 =    pldi # ", Las Vegas, Nevada" }
@STRING{pldi98 =    pldi # ", {M}ontreal, {C}anada" }
@STRING{pldi99 =    pldi # ", {A}tlanta, {G}eorgia" }
@STRING{pldi00 =    pldi # ", Vancouver, British Columbia, Canada" }
@STRING{pldi01 =    pldi # ", Snowbird, Utah" }
@STRING{pldi02 =    pldi # ", Berlin, Germany" }
@STRING{pldi03 =    pldi # ", San Diego, California" }
@STRING{pldi04 =    pldi # ", Washington, DC" }
@STRING{pldi05 =    pldi # ", Chicago, Illinois" }
@STRING{pldi06 =    pldi # ", Ottawa, Canada" }
@STRING{pldi07 =    pldi # ", San Diego, California" }
@STRING{pldi08 =    pldi # ", Tucson, Arizona" }
@STRING{pldi09 =    pldi # ", Dublin, Ireland" }
@STRING{pldi10 =    pldi # ", Toronto, Canada" }
@STRING{pldi11 =    pldi # ", San Jose, California" }
@STRING{pldi12 =    pldi # ", Beijing, China" }
@STRING{pldi13 =    pldi # ", Seattle, Washington" }
@STRING{pldi14 =    pldi # ", Edinburgh, Scotland" }
@STRING{pldi20 =    pldi } % Virtual
@STRING{pldi21 =    pldi } % Virtual
% ----
@STRING{lfp =       "ACM Symposium on Lisp and Functional Programming (LFP)" }
@STRING{lfp84 =     lfp # ", Austin, Texas" }
@STRING{lfp88 =     lfp # ", Snowbird, Utah" }
@STRING{lfp90 =     lfp }
@STRING{lfp92 =     lfp }
% ----
@STRING{fpca =      "ACM Symposium on Functional Programming Languages and
                    Computer Architecture (FPCA)" }
@STRING{fpca89 =    fpca }
@STRING{fpca93 =    fpca }
% ----
@STRING{sosp=" {ACM} {S}ymposium on {O}perating {S}ystems {P}rinciples ({SOSP})"}
% ----
@STRING{fool =      "Workshop on Foundations of Object-Oriented Languages
                    (FOOL), informal proceedings" }
@STRING{tlca =      "Typed Lambda Calculi and Applications (TLCA)" }
@STRING{tlca93 =    tlca # ", Utrecht, The Netherlands" }
@STRING{tlca95 =    tlca # ", Edinburgh, UK" }
@STRING{tlca97 =    tlca # ", Nancy, France" }
@STRING{tlca99 =    tlca # ", L'Aquila, Italy" }
@STRING{tlca01 =    tlca # ", Krakow, Poland" }
@STRING{tlca03 =    tlca # ", Valencia, Spain" }
@STRING{tlca05 =    tlca # ", Nara, Japan" }
@STRING{tlca07 =    tlca # ", Paris, France" }
@STRING{tlca09 =    tlca # ", Brasilia, Brazil" }
@STRING{tlca11 =    tlca # ", Novi Sad, Serbia" }
@STRING{tlca13 =    tlca # ", Eindhoven, The Netherlands" }

@string{fscd = "Formal Structures for Computation and Deduction"}
@string{fscd18 = fscd # ", Oxford England"}

@string{cav =       "Conference on Computer Aided Verification (CAV)"}
@string{ccs =       "ACM Conference on Computer and Communication Security (CCS)"}
@string{oakland =   "{IEEE} Symposium on Security and Privacy"}
@string{dls =       "Dynamic Languages Symposium (DLS)"}
@STRING{esop =      "European Symposium on Programming (ESOP)" }
@STRING{esop92 =    esop # ", Rennes, France" }
@STRING{esop12 =    esop # ", Tallinn, Estonia" }
@STRING{ecoop =     "{E}uropean {C}onference on {O}bject-{O}riented
                    {P}rogramming ({ECOOP})" }
@STRING{ecoop97 =   ecoop }
@STRING{ecoop02 =   ecoop # ", Malaga, Spain" }
@STRING{flops =     "International Symposium on Functional and Logic Programming (FLOPS)" }
@STRING{flops02 =   flops # ", Aizu, Japan" }
@string{icalp =     "International Colloquium on Automata, Languages and Programming (ICALP)"}
@STRING{icalp04 =    icalp # ", Turku, Finland" }
@string{plpv =      "Programming Languages meets Program Verification (PLPV)"}
@STRING{post =      "Principles of Security and Trust (POST)" }
@string{ppdp =      "ACM Conference on Principles and Practice of Declarative Programming (PPDP)"}
@string{scheme =    "Scheme and Functional Programming Workshop (Scheme)"}
@string{stop =      "Workshop on Script-to-Program Evolution (STOP)"}
@string{tldi =      "ACM SIGPLAN Workshop on Types in Language Design and Implementation (TLDI)"}
@STRING{tacs =      "Theoretical Aspects of Computer Software (TACS)" }
@STRING{tacs01 =    tacs # ", Sendai, Japan" }
@string{tfp =       "Trends in Functional Programming (TFP)"}
@STRING{webdb =     {International Workshop on the Web and Databases
                    (WebDB)} }
@STRING{langsec = "Language-theoretic Security IEEE Security and Privacy Workshop (LangSec)"}
@STRING{fossacs = "Foundations of Software Science and Computational Structures"}
@STRING{fossacs09 = fossacs # ", Berlin"}
@STRING{pacmpl = "Proceedings of the ACM on Programming Languages (PACMPL)"}

@STRING{csl =      "Computer Science Logic" }
@STRING{csl94 =    csl # ", Kazimierz, Poland" }
@STRING{csl91 =    csl # ", Berne, Switzerland" }
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{henglein_regular_2011,
author = {Henglein, Fritz and Nielsen, Lasse},
title = {Regular expression containment: coinductive axiomatization and computational interpretation},
year = {2011},
isbn = {9781450304900},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1926385.1926429},
doi = {10.1145/1926385.1926429},
abstract = {We present a new sound and complete axiomatization of regular expression containment. It consists of the conventional axiomatization of concatenation, alternation, empty set and (the singleton set containing) the empty string as an idempotent semiring, the fixed- point rule E* = 1 + E \texttimes{} E* for Kleene-star, and a general coinduction rule as the only additional rule.Our axiomatization gives rise to a natural computational interpretation of regular expressions as simple types that represent parse trees, and of containment proofs as coercions. This gives the axiom- atization a Curry-Howard-style constructive interpretation: Containment proofs do not only certify a language-theoretic contain- ment, but, under our computational interpretation, constructively transform a membership proof of a string in one regular expression into a membership proof of the same string in another regular expression.We show how to encode regular expression equivalence proofs in Salomaa's, Kozen's and Grabmayer's axiomatizations into our containment system, which equips their axiomatizations with a computational interpretation and implies completeness of our axiomatization. To ensure its soundness, we require that the computational interpretation of the coinduction rule be a hereditarily total function. Hereditary totality can be considered the mother of syn- tactic side conditions: it "explains" their soundness, yet cannot be used as a conventional side condition in its own right since it turns out to be undecidable.We discuss application of regular expressions as types to bit coding of strings and hint at other applications to the wide-spread use of regular expressions for substring matching, where classical automata-theoretic techniques are a priori inapplicable.Neither regular expressions as types nor subtyping interpreted coercively are novel per se. Somewhat surprisingly, this seems to be the first investigation of a general proof-theoretic framework for the latter in the context of the former, however.},
booktitle = {Proceedings of the 38th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {385–398},
numpages = {14},
keywords = {type, regular expression, equivalence, containment, computational interpretation, coinduction, coercion, axiomatization},
location = {Austin, Texas, USA},
series = {POPL '11}
}

@inproceedings{krishnaswami_integrating_2015,
author = {Krishnaswami, Neelakantan R. and Pradic, Pierre and Benton, Nick},
title = {Integrating Linear and Dependent Types},
month = jan,
year = {2015},
doi = {10.1145/2676726.2676969},
series = popl15
}

@article{leroy_formal_2009,
author = {Leroy, Xavier},
title = {Formal verification of a realistic compiler},
month = jul,
year = {2009},
volume = {52},
number = {7},
doi = {10.1145/1538788.1538814},
journal = cacm,
pages = {107–115},
}

@inproceedings{yangFindingUnderstandingBugs,
author = {Yang, Xuejun and Chen, Yang and Eide, Eric and Regehr, John},
title = {Finding and understanding bugs in C compilers},
mon = jan,
year = {2011},
doi = {10.1145/1993316.1993532},
series = pldi11
}

@inproceedings{jourdanValidatingLRParsers2012,
title = {Validating {LR}(1) {Parsers}},
author = {Jourdan, Jacques-Henri and Pottier, François and Leroy, Xavier},
series = esop12,
mon = mar,
year = {2012},
doi = {10.1007/978-3-642-28869-2_20},
}

@inproceedings{benton1994,
author       = {Benton, P. N.},
title        = {A Mixed Linear and Non-Linear Logic: Proofs, Terms and Models},
series       = csl94,
mon          = sep,
year         = {1994},
url          = {https://doi.org/10.1007/BFb0022251},
}

@article{rabinFiniteAutomataTheir1959,
title = {Finite {Automata} and {Their} {Decision} {Problems}},
volume = {3},
doi = {10.1147/rd.32.0114},
number = {2},
journal = {IBM Journal of Research and Development},
author = {Rabin, M. O. and Scott, D.},
month = apr,
year = {1959},
pages = {114--125},
}

@article{thompsonProgrammingTechniquesRegular1968,
	title = {Programming {Techniques}: {Regular} expression search algorithm},
	volume = {11},
	issn = {0001-0782, 1557-7317},
	shorttitle = {Programming {Techniques}},
	url = {https://dl.acm.org/doi/10.1145/363347.363387},
	number = {6},
	journal = cacm,
	author = {Thompson, Ken},
	month = jun,
	year = {1968},
	pages = {419--422},
}

@article{chom1963,
  title        = {Formal Properties of Grammars},
  author       = {Noam Chomsky},
  year         = 1963,
  journal      = {Handbook of Mathematical Psychology},
  volume       = {II},
  pages        = {323--418},
}

@phdthesis{day1970construction,
  title={Construction of biclosed categories},
  author={Day, Brian John},
  year={1970},
  school={University of New South Wales PhD thesis}
}

@InProceedings{frischCardelli,
author="Frisch, Alain and Cardelli, Luca",
title="Greedy Regular Expression Matching",
series=icalp04,
mon = jul,
year={2004},
doi={10.1007/978-3-540-27836-8_53}
}

@inproceedings{danielssonTotalParserCombinators2010,
title = {Total Parser Combinators},
seris = icfp10,
author = {Danielsson, Nils Anders},
year = {2010},
month = sep,
pages = {285--296},
doi = {10.1145/1863543.1863585},
}

@inproceedings{lasserCoStarVerifiedALL2021,
title = {{{CoStar}}: A Verified {{ALL}}(*) Parser},
author = {Lasser, Sam and Casinghino, Chris and Fisher, Kathleen and Roux, Cody},
series = pldi21,
month = jun,
year = {2021},
pages = {420--434},
doi = {10.1145/3453483.3454053},
}

@article{elliottSymbolicAutomaticDifferentiation2021,
title = {Symbolic and Automatic Differentiation of Languages},
author = {Elliott, Conal},
year = {2021},
month = aug,
doi = {10.1145/3473583},
series = icfp21
}

@inproceedings{EdelmannZippy2020,
author = {Edelmann, Romain and Hamza, Jad and Kun\v{c}ak, Viktor},
title = {Zippy LL(1) parsing with derivatives},
mon = jun,
year = {2020},
doi = {10.1145/3385412.3385992},
series = pldi20
}

@article{VezzosiMortbergAbel2019,
author = {Vezzosi, Andrea and M\"{o}rtberg, Anders and Abel, Andreas},
title = {Cubical Agda: A Dependently Typed Programming Language with Univalence and Higher Inductive Types},
month = {jul},
year = {2019},
doi = {10.1145/3341691},
series = icfp19
}

@article{lambek58,
author = {Joachim Lambek},
title = {The Mathematics of Sentence Structure},
journal = {The American Mathematical Monthly},
volume = {65},
number = {3},
pages = {154--170},
year = {1958},
doi = {10.1080/00029890.1958.11989160},
}

@inbook{Hofmann_1997,
place={Cambridge},
series={Publications of the Newton Institute},
title={Syntax and Semantics of Dependent Types},
booktitle={Semantics and Logics of Computation},
publisher={Cambridge University Press},
author={Hofmann, Martin},
year={1997}, pages={79–130},
collection={Publications of the Newton Institute}}

@incollection{seely89,
    AUTHOR = {Seely, R. A. G.},
     TITLE = {Linear logic, {$*$}-autonomous categories and cofree
              coalgebras},
 BOOKTITLE = {Categories in computer science and logic ({B}oulder, {CO},
              1987)},
    SERIES = {Contemp. Math.},
    VOLUME = {92},
     PAGES = {371--382},
 PUBLISHER = {Amer. Math. Soc., Providence, RI},
      YEAR = {1989},
      ISBN = {0-8218-5100-4},
   MRCLASS = {03G30 (03B45 18A15)},
  MRNUMBER = {1003210},
MRREVIEWER = {G.\ E.\ Mints and M.\ Gordin},
       DOI = {10.1090/conm/092/1003210},
       URL = {https://doi.org/10.1090/conm/092/1003210},
}

@unpublished{coquandPresheafModel,
author = {Thierry Coquand},
year = {2013},
title = {Presheaf model of type theory},
note = {\url{https://www.cse.chalmers.se/~coquand/presheaf.pdf}}
}

@article{lmcs:7713,
  TITLE = {{Multimodal Dependent Type Theory}},
  AUTHOR = {Daniel Gratzer and G. A. Kavvos and Andreas Nuyts and Lars Birkedal},
  DOI = {10.46298/lmcs-17(3:11)2021},
  JOURNAL = lmcs,
  VOLUME = 17,
  number = 3,
  YEAR = {2021},
  MONTH = Jul,
}

@article{girard_linear_1987,
title = {Linear logic},
journal = tcs,
volume = {50},
number = {1},
pages = {1-101},
year = {1987},
doi = {10.1016/0304-3975(87)90045-4},
author = {Jean-Yves Girard},
}

@Book{hottbook,
author =    {The {Univalent Foundations Program}},
title =     {Homotopy Type Theory: Univalent Foundations of Mathematics},
publisher = {\url{https://homotopytypetheory.org/book}},
address =   {Institute for Advanced Study},
year =      2013}

@inproceedings{nakov_quantitative_2022,
title = {Quantitative {Polynomial} {Functors}},
doi = {10.4230/LIPIcs.TYPES.2021.10},
series = types,
author = {Nakov, Georgi and Nordvall Forsberg, Fredrik},
month = jun,
year = {2021},
}

@inproceedings{jung_higher-order_2016,
title = {Higher-order ghost state},
doi = {10.1145/2951913.2951943},
author = {Jung, Ralf and Krebbers, Robbert and Birkedal, Lars and Dreyer, Derek},
month = sep,
series = icfp16
}

@inproceedings{leis_towards_1992,
author="Lei{\ss}, Haas",
title="Towards Kleene Algebra with recursion",
series=csl91,
mon = oct,
year = {1991},
doi={10.1007/BFb0023771}
}

@article{rosenkrantz_properties_1970,
title = {Properties of deterministic top-down grammars},
volume = {17},
doi = {10.1016/S0019-9958(70)90446-8},
number = {3},
urldate = {2024-11-14},
journal = {Information and Control},
author = {Rosenkrantz, D. J. and Stearns, R. E.},
month = oct,
year = {1970},
pages = {226--256},
}

% TODO here down

@inproceedings{gambino_wellfounded_2004,
address = {Berlin, Heidelberg},
title = {Wellfounded {Trees} and {Dependent} {Polynomial} {Functors}},
doi = {10.1007/978-3-540-24849-1_14},
booktitle = {Types for {Proofs} and {Programs}},
author = {Gambino, Nicola and Hyland, Martin},
year = {20033,
}

@article{altenkirch_indexed_2015,
	title = {Indexed containers},
	volume = {25},
	doi = {10.1017/S095679681500009X},
	journal = {Journal of Functional Programming},
	author = {Altenkirch, Thorsten and Ghani, Neil and Hancock, Peter and Mcbride, Conor and Morris, Peter},
	month = jan,
	year = {2015},
}

@software{The_Agda_Community_Cubical_Agda_Library_2024,
author = {{The Agda Community}},
month = feb,
title = {{Cubical Agda Library}},
url = {https://github.com/agda/cubical},
version = {0.7},
year = {2024}
}

@INPROCEEDINGS{7174865,
  author={O'Hearn, Peter},
  booktitle={2015 30th Annual ACM/IEEE Symposium on Logic in Computer Science},
  title={From Categorical Logic to Facebook Engineering},
  year={2015},
  volume={},
  number={},
  pages={17-20},
  keywords={Semantics;Facebook;Computer science;Mathematical model;Cognition;Syntactics;Shape},
  doi={10.1109/LICS.2015.11}}
@inproceedings{reynolds_separation_2002,
	title = {Separation logic: a logic for shared mutable data structures},
	shorttitle = {Separation logic},
	url = {https://ieeexplore.ieee.org/document/1029817},
	doi = {10.1109/LICS.2002.1029817},
	abstract = {In joint work with Peter O'Hearn and others, based on early ideas of Burstall, we have developed an extension of Hoare logic that permits reasoning about low-level imperative programs that use shared mutable data structure. The simple imperative programming language is extended with commands (not expressions) for accessing and modifying shared structures, and for explicit allocation and deallocation of storage. Assertions are extended by introducing a "separating conjunction" that asserts that its subformulas hold for disjoint parts of the heap, and a closely related "separating implication". Coupled with the inductive definition of predicates on abstract data structures, this extension permits the concise and flexible description of structures with controlled sharing. In this paper, we survey the current development of this program logic, including extensions that permit unrestricted address arithmetic, dynamically allocated arrays, and recursive procedures. We also discuss promising future directions.},
	urldate = {2024-11-14},
	booktitle = {Proceedings 17th {Annual} {IEEE} {Symposium} on {Logic} in {Computer} {Science}},
	author = {Reynolds, J.C.},
	month = jul,
	year = {2002},
	note = {ISSN: 1043-6871},
	keywords = {Arithmetic, Artificial intelligence, Bibliographies, Computer languages, Computer science, Data structures, Logic arrays, Logic programming, Programmable logic arrays, Reflection},
	pages = {55--74},
	file = {Full Text PDF:/Users/maxsnew/Zotero/storage/9LIXHB29/Reynolds - 2002 - Separation logic a logic for shared mutable data structures.pdf:application/pdf},
}

@book{Montague1974-MONFPS,
	address = {New Haven,},
	author = {Richard Montague},
	editor = {},
	publisher = {Yale University Press},
	title = {Formal Philosophy: Selected Papers of Richard Montague},
	year = {1974}
}

@incollection{buszkowskiTypeLogicsGrammar2003,
	title = {Type {Logics} in {Grammar}},
	volume = {21},
	pages = {337--382},
	booktitle = {Trends in {Logic}},
	author = {Buszkowski, W.},
	year = {2003},
	doi = {10.1007/978-94-017-3598-8_12},
}
@book{ranta-2011,
author = {Ranta, Aarne},
title = {Grammatical Framework: Programming with Multilingual Grammars},
year = {2011},
isbn = {1575866269},
publisher = {Center for the Study of Language and Information/SRI},
abstract = {Grammatical Framework is a programming language designed for writing grammars, which has the capability of addressing several languages in parallel. This thorough introduction demonstrates how to write grammars in Grammatical Framework and use them in applications such as tourist phrasebooks, spoken dialogue systems, and natural language interfaces. The examples and exercises presented here address several languages, and the readers are shown how to look at their own languages from the computational perspective.}
}

@inproceedings{luo,
  author    = {Zhaohui Luo},
  title     = {Substructural Calculi with Dependent Types},
  booktitle = {Linearity \& TLLA Joint Workshop},
  doi       = {10.29007/qrqp},
  year      = {2018}
}

@Inbook{lambek1988categorial,
author="Lambek, J.",
editor="Oehrle, Richard T.
and Bach, Emmon
and Wheeler, Deirdre",
title="Categorial and Categorical Grammars",
bookTitle="Categorial Grammars and Natural Language Structures",
year="1988",
publisher="Springer Netherlands",
address="Dordrecht",
pages="297--317",
abstract="Having been under the impression that categorial grammars in general and the so-called syntactic calculus in particular had been swept away by the tide of transformational grammar, I was very surprised to learn of the recent revival of interest in these matters, as, for example, by Buszkowski in Poland and by van Benthem in the Netherlands. Stimulated by the renewed activity in this area, I decided to take another look at it, and in particular, to explore the categorical connection, which had been at the back of my mind all along.",
isbn="978-94-015-6878-4",
doi="10.1007/978-94-015-6878-4_11",
url="https://doi.org/10.1007/978-94-015-6878-4_11"
}

@inproceedings{Guillaume2024,
author = {Guillaume, Maxime and Pogodalla, Sylvain and Tourneur, Vincent},
title = {ACGtk: A Toolkit for Developing and Running Abstract Categorial Grammars},
year = {2024},
isbn = {978-981-97-2299-0},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-981-97-2300-3_2},
doi = {10.1007/978-981-97-2300-3_2},
abstract = {Abstract categorial grammars (ACGs) is an expressive grammatical framework whose formal properties have been extensively studied. While it can provide its own account, as a grammar, of linguistic phenomena, it is known to encode several grammatical formalisms, including context-free grammars, but also mildly context-sensitive formalisms such as tree-adjoining grammars or m-linear context-free rewriting systems for which parsing is polynomial. The ACG toolkit we present provides a compiler, acgc, that checks and turns ACGs into representations that are suitable for testing and parsing, used in the acg interpreter. We illustrate these functionalities and discuss implementation features, in particular the Datalog reduction on which parsing is based, and the magic set rewriting techniques that can further be applied.},
booktitle = {Functional and Logic Programming: 17th International Symposium, FLOPS 2024, Kumamoto, Japan, May 15–17, 2024, Proceedings},
pages = {13–30},
numpages = {18},
keywords = {Abstract Categorial Grammars, Natural Language Processing, OCaml, Datalog},
location = {Kumamoto, Japan}
}

@article{Cockett_1993,
title={Introduction to distributive categories},
volume={3},
DOI={10.1017/S0960129500000232},
number={3},
journal={Mathematical Structures in Computer Science},
author={Cockett, J. R. B.},
year={1993}, pages={277–307}}

@InProceedings{vakar2015,
author="V{\'a}k{\'a}r, Matthijs",
title="A Categorical Semantics for Linear Logical Frameworks",
booktitle="Foundations of Software Science and Computation Structures",
year="2015",
pages="102--116",
doi={10.1007/978-3-662-46678-0_7}
}

@misc{schaefer2025intrinsicverificationparsersformal,
      title={Intrinsic Verification of Parsers and Formal Grammar Theory in Dependent Lambek Calculus (Extended Version)},
      author={Steven Schaefer and Nathan Varner and Pedro H. Azevedo de Amorim and Max S. New},
      year={2025},
      eprint={2504.03995},
      archivePrefix={arXiv},
      primaryClass={cs.PL},
      url={https://arxiv.org/abs/2504.03995},
}

@software{schaefer_2025_15049780,
  author       = {Schaefer, Steven and
                  Varner, Nathan and
                  Azevedo de Amorim, Pedro Henrique and
                  New, Max S.},
  title        = {Agda Formalization of "Intrinsic Verification of
                   Parsers and Formal Grammar Theory in Dependent
                   Lambek Calculus"
                  },
  month        = mar,
  year         = 2025,
  publisher    = {Zenodo},
  doi          = {10.5281/zenodo.15049780},
  url          = {https://doi.org/10.5281/zenodo.15049780},
}